* Holy grail demo

** What is it?

This demonstrates the /holy grail/ workflow for web development the way I envision it: an auto-restartable back-end in the REPL + a hot-reloadable front-end in the browser.

** Demo 

Make sure [[https://github.com/boot-clj/boot][boot-clj]] is installed. This is the awesome build tool that makes this worflow possible.

Clone this repo, cd into it and start the development pipeline build.
#+BEGIN_SRC shell
$ git clone git@github.com:danielsz/holygrail.git
$ cd holygrail
$ boot dev
#+END_SRC

This starts the build pipeline. Pay attention to the line that says:
#+BEGIN_SRC shell
nREPL server started on port 49722 on host 127.0.0.1 - nrepl://127.0.0.1:49722
#+END_SRC

Launch your favorite editor, and connect to the headless REPL (*M-x cider-connect* in Emacs works great). The N
Type:
#+BEGIN_SRC clojure
(go)
#+END_SRC

In the browser, go to [[http://localhost:3000]]

You will see a simple web app that doesn’t do much, but the point is the workflow. In other words, the possibilities to develop both APIs and client-side functionality in a most comfortable way. Let’s demonstrate this. 

Open the file *src/clj/real_time/handler.clj*. Let’s add a route: 
#+BEGIN_SRC clojure
(defroutes app-routes
  (GET "/" [] (-> (resp/resource-response "index.html")
                     (resp/content-type "text/html")))
  (GET "/foo" [] (str "<h1>Hello, world</h1>")) ;; let’s add this
  (route/not-found "Not Found"))

#+END_SRC

Now save the file. The build pipeline detects the change, and restarts the backend system automatically.
That’s what we asked for when configuring our ~dev~ task in ~build.boot~.

#+BEGIN_SRC clojure
(system :sys #'dev-system :hot-reload true :files ["handler.clj"])
#+END_SRC

If we had set hot-reload to false, we would have had to go to the REPL and type:

#+BEGIN_SRC clojure
(reset)
#+END_SRC

In the browser, type [[http://localhost:3000/foo]]. Voilà. A new route is born. This demonstrates the workflow in the backend. Now let’s do a change client-side. Open *src/cljs/real_time/core.cljs* and on line 26 change the string for Value from “submit” to “send”. Save the file. The change is reflected automatically in the browser. How cool is that?

Do you feel the creative juices flow? Aren’t you all set to dive in the zone for endless hours of sheer creative output?!
