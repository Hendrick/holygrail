* Holy grail

#+BEGIN_QUOTE
 Well, on second thought, let's not go to Camelot -- it is
a silly place. â€” King Arthur
#+END_QUOTE

** What is it?

This demonstrates the *holy grail* workflow for web development the way I envision it: an auto-restartable back-end in the REPL + a hot-reloadable front-end in the browser.

This workflow is built on top of [[http://boot-clj.com/][Boot]], a build tool, and [[https://github.com/danielsz/system/tree/master/examples/boot][system]], a component library.

** Requirements
1. `boot`
2. Datomic

** Installation
Clone this repo, `cd` into it, and start the development pipeline build.
#+BEGIN_SRC shell
$ git clone git@github.com:Hendrick/holygrail.git
$ cd holygrail
$ boot dev
#+END_SRC

** What's Happening
`boot dev` runs the following tasks:

1. Sets up environment variables with `environ`
2. Creates a file watcher
3. Creates a `dev-system` that reloads when `handler.clj` changes
4. Sets up to reload when you change a `cljs` file
5. Sets up `cljs` compliation
6. Sets up a REPL
7. Ensures that your Datomic schema is transacted
8. Seeds your Datomic database

** Things TODO
- Task to autodownload Datomic if it's not installed locally?
- Investigate option to not seed on every change
- Test migration of conformity with `dev-system`

** Principle of operation
*** Manual
You want to operate with a REPL, start the system, and reset it when you make changes.

Compose a build pipeline:

#+BEGIN_SRC clojure
(deftask dev
  "Run a restartable system in the Repl"
  []
  (comp
   (environ :env {:http-port 3000})
   (watch)
   (system :sys #'dev-system)
   (reload)
   (cljs)
   (repl :server true)))
#+END_SRC

Start it:

#+BEGIN_SRC shell
$ boot dev
#+END_SRC

 Pay attention to the line that says:
#+BEGIN_SRC shell
nREPL server started on port 49722 on host 127.0.0.1 - nrepl://127.0.0.1:49722
#+END_SRC

Launch your favorite editor, and connect to the headless REPL (~M-x cider-connect~ in Emacs works great). Then
type:
#+BEGIN_SRC clojure
(go)
#+END_SRC

Your web app is started and listening at [[http://localhost:3000]]. When you make changes that require a system restart, type in the REPL:

#+BEGIN_SRC clojure
(reset)
#+END_SRC

*** Automatic

The ~boot-system~ task allows you to automate all of the above.

#+BEGIN_SRC clojure
(system :sys #'dev-system :auto-start true :hot-reload true :files ["handler.clj"])
#+END_SRC

The ~auto-start~ option takes care of starting the app the first time. Your system will automatically be reset after editing ~handler.clj~. Changes elsewhere do not require a system restart, and are available via namespace reloading everytime you save your work.

*Note:* The ~build.boot~ in this repo already contains those options.

** Demo

A demo video that tries to demonstrate how developing for the web can be a liberating and seamless experience.

#+HTML: <a href="http://www.youtube.com/watch?feature=player_embedded&v=eoxsSrFK_Is" target="_blank"><img src="http://img.youtube.com/vi/eoxsSrFK_Is/0.jpg" alt="Holy Grail demo" width="240" height="180" border="10" /></a>

Do you feel the creative juices flow? Are you ready for endless hours of sheer creative output?
